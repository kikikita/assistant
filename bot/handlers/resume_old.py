import json
from typing import Any, Dict, List

import httpx
from aiogram import Bot, F, Router
from aiogram.enums import ParseMode
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message

from keyboards.inline import (
    build_answer_keyboard,
    consent_kb,
    resume_completed_kb,
    resume_reset_or_continue_kb,
)
from settings import settings
from utils.states import DialogSG

router = Router()
CONFIRM_MARK = "__confirm__"

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Telegram limits & helpers ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

MAX_TG_MSG = 4096          # —Ñ–æ—Ä–º–∞–ª—å–Ω—ã–π –ª–∏–º–∏—Ç Telegram
SAFE_TG_MSG = 4000


def _split_long_html(text: str, limit: int = SAFE_TG_MSG) -> List[str]:
    """
    –î–µ–ª–∏—Ç –¥–ª–∏–Ω–Ω—ã–π HTML-—Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏ ‚â§ limit —Å–∏–º–≤–æ–ª–æ–≤.
    ‚Ä¢ —Ä–µ–∂–µ—Ç –ø–æ –¥–≤–æ–π–Ω–æ–º—É '\n\n', –∑–∞—Ç–µ–º –ø–æ '\n', –∏ –ª–∏—à—å –∑–∞—Ç–µ–º –ø–æ –ª–∏–º–∏—Ç—É.
    ‚Ä¢ —Ç–µ–≥–æ–≤–∞—è —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –Ω–µ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è, –Ω–æ –¥–ª—è –ø—Ä–æ—Å—Ç–æ–≥–æ markdown –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ.
    """
    if len(text) <= limit:
        return [text]

    parts: List[str] = []
    while len(text) > limit:
        cut = text.rfind("\n\n", 0, limit)
        if cut == -1:
            cut = text.rfind("\n", 0, limit)
        if cut == -1:
            cut = limit
        parts.append(text[:cut].rstrip())
        text = text[cut:].lstrip()
    if text:
        parts.append(text)
    return parts


async def _send_cv(
    chat_id: int,
    cv_markdown: str,
    bot: Bot,
    *,
    prefix: str | None = None,
    reply_markup=None,
) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç CV –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ.
    ‚Ä¢ reply_markup –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –∫ –ø–µ—Ä–≤–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é.
    """
    full_text = f"{prefix}\n{cv_markdown}" if prefix else cv_markdown
    chunks = _split_long_html(full_text)

    for i, chunk in enumerate(chunks):
        await bot.send_message(
            chat_id,
            chunk,
            parse_mode=ParseMode.HTML,
            reply_markup=reply_markup if i == len(chunks) - 1 else None,
        )

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ PDF ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ


@router.message(F.document.mime_type == "application/pdf")
async def pdf_resume_cb(message: Message, bot: Bot, state: FSMContext) -> None:
    """
    –ü–æ–ª–Ω—ã–π flow –≤ –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å:
      ‚Ä¢ –≥—Ä—É–∑–∏–º PDF,
      ‚Ä¢ backend –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ª–∏–±–æ QuestionOut, –ª–∏–±–æ CVOut,
      ‚Ä¢ –≤—ã–≤–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ç–æ, —á—Ç–æ –ø—Ä–∏—à–ª–æ.
    """
    status_msg = await message.answer("‚è≥ –†–∞—Å–ø–æ–∑–Ω–∞—é —Ä–µ–∑—é–º–µ, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
    tg_id = str(message.from_user.id)

    # ‚Äî —Å–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª –∏–∑ Telegram ‚Äî
    doc = message.document
    file = await bot.get_file(doc.file_id)
    raw = await bot.download_file(file.file_path)
    files = {"file": ("resume.pdf", raw, "application/pdf")}

    async with httpx.AsyncClient(timeout=120.0) as cli:
        resp = await cli.post(
            f"{settings.bots.app_url}/api/v1/dialog/pdf",
            data={"tg_id": tg_id},
            files=files,
        )

    if resp.status_code != 200:
        await status_msg.edit_text(
            "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å PDF. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return

    data = resp.json()

    # ‚Äî –≤–µ—Ç–∫–∞ CVOut ‚Äî
    if "cv_markdown" in data:
        await _send_cv(
            chat_id=message.chat.id,
            cv_markdown=data["cv_markdown"],
            bot=bot,
            prefix="‚úÖ –Ø —Å–æ–±—Ä–∞–ª —Ä–µ–∑—é–º–µ!",
            reply_markup=resume_completed_kb(),
        )
        await state.clear()
        return

    # ‚Äî –≤–µ—Ç–∫–∞ QuestionOut ‚Äî
    await status_msg.edit_text(
        "‚úÖ –†–µ–∑—é–º–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ! –¢–µ–ø–µ—Ä—å –∑–∞–¥–∞–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —É—Ç–æ—á–Ω—è—é—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤."
    )
    await _show_first_question(
        chat_id=message.chat.id,
        q=data,
        bot=bot,
        state=state,
    )


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ —É—Ç–∏–ª–∏—Ç—ã ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ


async def _check_consent(tg_id: int) -> bool:
    """True ‚á¢ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏–Ω—è–ª –æ–±–∞ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö —Å–æ–≥–ª–∞—Å–∏—è."""
    url = f"{settings.bots.app_url}/api/v1/auth/tg"
    async with httpx.AsyncClient(timeout=5.0) as cli:
        resp = await cli.post(url, json={"tg_id": tg_id})
    if resp.status_code != 200:
        return False
    user: Dict[str, Any] = resp.json()["user"]
    return bool(user.get("pdn_agreed") and user.get("offer_agreed"))


def _get_chosen(st_data: Dict[str, Any]) -> List[str]:
    return json.loads(st_data.get("chosen", "[]"))


async def _store_chosen(state: FSMContext, chosen: List[str]) -> None:
    await state.update_data(chosen=json.dumps(chosen))


def _is_multi(q: Dict[str, Any]) -> bool:
    return bool(q.get("multi_select"))


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –≤—ã–≤–æ–¥ –≤–æ–ø—Ä–æ—Å–∞ –∏ FSM-–∫–æ–Ω—Ç–µ–∫—Å—Ç ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ


async def _send_question(
    chat_id: int,
    q: Dict[str, Any],
    chosen: List[str],
    bot: Bot,
) -> Message:
    kb = None
    if q.get("inline_kb"):
        kb = build_answer_keyboard(
            session_id=q["session_id"],
            field_name=q["field_name"],
            buttons=q.get("buttons", []),
            multi_select=_is_multi(q),
            chosen=chosen,
        )
    return await bot.send_message(chat_id, q["template"], reply_markup=kb)


async def _show_first_question(
    chat_id: int,
    q: Dict[str, Any],
    bot: Bot,
    state: FSMContext,
) -> None:
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≤–æ–ø—Ä–æ—Å –∏ –ø–∏—à–µ—Ç –µ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤ FSM."""
    q = dict(q)
    q["multi_select"] = _is_multi(q)

    msg = await _send_question(chat_id, q, [], bot)

    await state.set_state(DialogSG.waiting_for_answer)
    await state.set_data(
        {
            "session_id": q["session_id"],
            "field_name": q["field_name"],
            "multi_select": q["multi_select"],
            "inline_kb": q.get("inline_kb", False),
            "buttons": q.get("buttons", []),
            "template": q["template"],
            "msg_id": msg.message_id,
            "chosen": json.dumps([]),
        },
    )

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ —Å—Ü–µ–Ω–∞—Ä–∏–π –≤—Ö–æ–¥–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ


async def _begin_dialog(
    chat_id: int,
    tg_id: int,
    bot: Bot,
    state: FSMContext,
) -> None:
    async with httpx.AsyncClient() as client:
        resp = await client.post(
            f'{settings.bots.app_url}/api/v1/dialog/next',
            json={'user_id': tg_id},
            timeout=10.0,
        )
    if resp.status_code != 200:
        await bot.send_message(chat_id, '‚ö†Ô∏è –°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.')
        return

    data: Dict[str, Any] = resp.json()

    if 'resume_id' in data:
        await _send_cv(
            chat_id=chat_id,
            cv_markdown=data["cv_markdown"],
            bot=bot,
            prefix="üìù –í—ã –Ω–∞—á–∞–ª–∏, –Ω–æ –µ—â—ë –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–∏:",
            reply_markup=resume_reset_or_continue_kb(data['resume_id']),
        )
        return

    if 'cv_markdown' in data:
        await _send_cv(
            chat_id=chat_id,
            cv_markdown=data["cv_markdown"],
            bot=bot,
            prefix="‚úÖ –†–µ–∑—é–º–µ —É–∂–µ –≥–æ—Ç–æ–≤–æ:",
            reply_markup=resume_completed_kb(),
        )
        return

    if {'session_id', 'field_name', 'template'} <= data.keys():
        await _show_first_question(chat_id, data, bot, state)
        return

    await bot.send_message(chat_id, '‚ö†Ô∏è –°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.')


@router.message(F.text == 'üìù –ó–∞–ø–æ–ª–Ω–∏—Ç—å —Ä–µ–∑—é–º–µ')
async def start_dialog(message: Message, bot: Bot, state: FSMContext) -> None:
    await state.clear()
    consent_txt = (
        '–ö–∞–∫ —Ö–æ—Ä–æ—à–æ –≤–æ—Å–ø–∏—Ç–∞–Ω–Ω—ã–π —Ä–æ–±–æ—Ç, —è –¥–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∏—Ç—å –≤–∞—à–µ —Å–æ–≥–ª–∞—Å–∏–µ '
        '–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ —Å–æ–≥–ª–∞—Å–∏–µ —Å –æ—Ñ–µ—Ä—Ç–æ–π.\n\n'
        '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –¥–æ–∫—É–º–µ–Ω—Ç–æ–º –ø–æ '
        '<a href="https://tomoru.team/useragreement">—Å—Å—ã–ª–∫–µ</a>\n\n'
        '–í—ã —Å–æ–≥–ª–∞—Å–Ω—ã —Å —ç—Ç–∏–º –¥–æ–∫—É–º–µ–Ω—Ç–æ–º?'
        )
    if not await _check_consent(message.from_user.id):
        await message.answer(
            consent_txt,
            parse_mode=ParseMode.HTML,
            reply_markup=consent_kb(),
        )
        return

    await _begin_dialog(message.chat.id, message.from_user.id, bot, state)


@router.callback_query(F.data.startswith('consent:'))
async def consent_cb(
    query: CallbackQuery, bot: Bot, state: FSMContext
) -> None:
    await query.answer()
    if query.data.endswith(':no'):
        await query.message.answer(
            'üòî –ë–µ–∑ —Å–æ–≥–ª–∞—Å–∏—è –º—ã –Ω–µ —Å–º–æ–∂–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.\n'
            '–ü—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´üìù –ó–∞–ø–æ–ª–Ω–∏—Ç—å —Ä–µ–∑—é–º–µ¬ª –µ—â—ë —Ä–∞–∑.',
        )
        await query.message.delete_reply_markup()
        return

    url = f'{settings.bots.app_url}/api/v1/users/consent'
    async with httpx.AsyncClient(timeout=5.0) as cli:
        await cli.post(url, json={'tg_id': query.from_user.id, 'agree': True})
    await query.message.delete_reply_markup()

    await _begin_dialog(query.message.chat.id, query.from_user.id, bot, state)


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ


@router.callback_query(F.data.startswith('answer:'))
async def answer_cb(query: CallbackQuery, state: FSMContext) -> None:
    """Inline-–æ—Ç–≤–µ—Ç; –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç multi-select."""
    await query.answer()
    _, sess_id, field, value = query.data.split(':', 3)
    session_id = int(sess_id)

    st = await state.get_data()
    is_multi = st.get('multi_select', False)

    # –≤—ã–±–æ—Ä / –æ—Ç–º–µ–Ω–∞ –ø—É–Ω–∫—Ç–∞
    if is_multi and value != CONFIRM_MARK:
        chosen = _get_chosen(st)
        if value in chosen:
            chosen.remove(value)
        else:
            chosen.append(value)
        await _store_chosen(state, chosen)

        await query.bot.edit_message_text(
            chat_id=query.message.chat.id,
            message_id=st['msg_id'],
            text=(
                f"{st['template']}\n"
                f"<i>–í—ã –≤—ã–±—Ä–∞–ª–∏: {', '.join(chosen) or '‚Äî'}</i>"
            ),
            reply_markup=build_answer_keyboard(
                session_id=session_id,
                field_name=field,
                buttons=st['buttons'],
                multi_select=True,
                chosen=chosen,
            ),
            parse_mode=ParseMode.HTML,
        )
        return

    # –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    if is_multi:
        chosen = _get_chosen(st)
        if not chosen:
            await query.answer(
                '–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –º–∏–Ω–∏–º—É–º –æ–¥–∏–Ω –≤–∞—Ä–∏–∞–Ω—Ç.',
                show_alert=True,
            )
            return
        answer_raw = ', '.join(chosen)

        # —É–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ä—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        await query.bot.edit_message_reply_markup(
            chat_id=query.message.chat.id,
            message_id=st['msg_id'],
            reply_markup=None,
        )
    else:
        answer_raw = value
        await query.bot.edit_message_text(
            chat_id=query.message.chat.id,
            message_id=query.message.message_id,
            text=(
                f"{st['template']}\n"
                f"<i>–í—ã –≤—ã–±—Ä–∞–ª–∏: {value}</i>"
            ),
            parse_mode=ParseMode.HTML,
            reply_markup=None,
        )

    await state.set_data({'session_id': session_id, 'field_name': field})
    await _handle_answer(
        reply_target=query.message,
        tg_id=query.from_user.id,
        answer_raw=answer_raw,
        bot=query.bot,
        state=state,
    )


@router.message(DialogSG.waiting_for_answer)
async def handle_text_answer(message: Message, state: FSMContext) -> None:
    st = await state.get_data()
    # –Ω–µ–ª—å–∑—è –ø–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç, –µ—Å–ª–∏ –µ—Å—Ç—å inline-–≤–∞—Ä–∏–∞–Ω—Ç—ã
    if st.get('inline_kb'):
        await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∫–Ω–æ–ø–∫–æ–π üëÜ')
        return
    # –ø—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —á–∏—Å–ª–æ–≤—ã—Ö / –¥–∞—Ç-–ø–æ–ª–µ–π
    # if st['field_name'] in {'desiredSalary', 'fixedPart', 'minSalary'}:
    #     if not message.text.isdigit():
    #         await message.answer('–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ üî¢')
    #         return
    # if st['field_name'] == 'readyInDays':
    #     if not (message.text.isdigit() and 0 < int(message.text) <= 365):
    #         await message.answer('–£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 365 üìÖ')
    #         return
    # if st['field_name'] == 'birthday':
    #     import re
    #     if not re.fullmatch(r'\d{4}-\d{2}-\d{2}', message.text):
    #         await message.answer('–§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: YYYY-MM-DD üìÜ')
    #         return
    await _handle_answer(
        reply_target=message,
        tg_id=message.from_user.id,
        answer_raw=message.text,
        bot=message.bot,
        state=state,
    )


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –≤ –±–µ–∫-—ç–Ω–¥ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ


async def _handle_answer(
    reply_target: Message | CallbackQuery,
    tg_id: int,
    answer_raw: str,
    bot: Bot,
    state: FSMContext,
) -> None:
    data = await state.get_data()
    payload = {
        'session_id': data['session_id'],
        'user_id': tg_id,
        'field_name': data['field_name'],
        'answer_raw': answer_raw,
    }
    async with httpx.AsyncClient() as client:
        resp = await client.post(
            f'{settings.bots.app_url}/api/v1/dialog/answer',
            json=payload,
            timeout=10.0,
        )
    if resp.status_code != 200:
        await reply_target.answer('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞.')
        return

    result: Dict[str, Any] = resp.json()

    if result.get('template') is None:
        await _send_cv(
            chat_id=reply_target.chat.id,
            cv_markdown=result["cv_markdown"],
            bot=bot,
            prefix="‚úÖ –†–µ–∑—é–º–µ —É–∂–µ –≥–æ—Ç–æ–≤–æ:",
            reply_markup=resume_completed_kb(),
        )
        await state.clear()
        return

    await _show_first_question(reply_target.chat.id, result, bot, state)


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ reset / continue ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ


@router.callback_query(F.data == 'resume:reset')
async def reset_resume(
    query: CallbackQuery, state: FSMContext, bot: Bot
) -> None:
    await query.answer()
    await state.clear()

    async with httpx.AsyncClient() as client:
        resp = await client.post(
            f'{settings.bots.app_url}/api/v1/dialog/reset',
            json={'user_id': query.from_user.id},
            timeout=10.0,
        )
    if resp.status_code != 200:
        await query.message.answer('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.')
        return

    first_q = resp.json()
    await query.message.answer('üîÅ –ó–∞–ø–æ–ª–Ω—è–µ–º —Ä–µ–∑—é–º–µ –∑–∞–Ω–æ–≤–æ!')
    await _show_first_question(query.message.chat.id, first_q, bot, state)


@router.callback_query(F.data.startswith('resume:continue:'))
async def continue_resume(
    query: CallbackQuery, bot: Bot, state: FSMContext
) -> None:
    await query.answer()
    resume_id = int(query.data.split(':')[-1])
    await state.update_data(resume_id=resume_id)

    async with httpx.AsyncClient() as client:
        resp = await client.post(
            f'{settings.bots.app_url}/api/v1/dialog/resume-continue',
            json={'resume_id': resume_id, 'user_id': query.from_user.id},
            timeout=10.0,
        )
    if resp.status_code != 200:
        await query.message.answer('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è.')
        return

    first_q = resp.json()
    await query.message.answer('‚úçÔ∏è –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ!')
    await _show_first_question(query.message.chat.id, first_q, bot, state)
