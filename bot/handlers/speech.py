import logging
import tempfile
from pathlib import Path

import httpx
from aiogram import F, Router
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from settings import settings

router = Router()
logger = logging.getLogger(__name__)

ASR_ENDPOINT = f"{settings.bots.app_url}/api/v1/dialog/audio/"
AGENT_ENDPOINT = f"{settings.bots.app_url}/api/v1/dialog/agent"
HTTP_TIMEOUT = 60.0


async def _download_telegram_file(bot, file_id: str,
                                  suffix: str = ".ogg") -> Path:
    """–°–∫–∞—á–∏–≤–∞–µ—Ç —Ñ–∞–π–ª Telegram –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É –∏
    –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ –Ω–µ–º—É."""
    tmp = tempfile.NamedTemporaryFile(suffix=suffix, delete=False)
    path = Path(tmp.name)
    await bot.download(file_id, destination=path)
    tmp.close()
    return path


async def _send_to_asr(file_path: Path) -> str:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–∞–π–ª –Ω–∞ —Å–µ—Ä–≤–∏—Å ASR –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç."""
    async with httpx.AsyncClient(timeout=HTTP_TIMEOUT) as cli:
        with file_path.open("rb") as fh:
            resp = await cli.post(
                ASR_ENDPOINT,
                files={
                    "file": (file_path.name,
                             fh,
                             "application/octet-stream")
                },
            )

    if resp.status_code != 200:
        logger.error("ASR %s ‚Üí %s", resp.status_code, resp.text)
        raise RuntimeError("ASR service error")

    return resp.json().get("text", "")


async def _send_to_agent(transcript: str, user_id: int) -> str:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ —Å–µ—Ä–≤–∏—Å –∞–≥–µ–Ω—Ç–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–≤–µ—Ç."""
    async with httpx.AsyncClient(timeout=HTTP_TIMEOUT) as client:
        resp = await client.post(
            AGENT_ENDPOINT,
            json={
                "message": transcript,
                "user_id": user_id,
            }
        )
    if resp.status_code != 200:
        logger.error("AGENT %s ‚Üí %s", resp.status_code, resp.text)
        return "–û—à–∏–±–∫–∞ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞"
    return resp.json().get("answer", "–û—à–∏–±–∫–∞ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞")


@router.message(F.voice | F.audio)
async def voice_message(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≥–æ–ª–æ—Å–æ–≤—ã–µ –∏ –∞—É–¥–∏–æ-—Å–æ–æ–±—â–µ–Ω–∏—è."""
    bot = message.bot
    await bot.send_chat_action(message.chat.id, "typing")

    media = message.voice or message.audio  # type: ignore
    tmp_path: Path | None = None

    try:
        tmp_path = await _download_telegram_file(bot, media.file_id)
        transcript = await _send_to_asr(tmp_path)
    except Exception as exc:  # noqa: BLE001
        logger.exception("Speech err: %s", exc)
        await message.answer(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∞—É–¥–∏–æ. "
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –ø–æ–∑–∂–µ üôè",
        )
        return
    finally:
        if tmp_path and tmp_path.exists():
            try:
                tmp_path.unlink()
            except OSError:
                logger.warning("Tmp not removed: %s", tmp_path)

    if not transcript:
        await message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ä–µ—á—å –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞ üòî")
        return

    await bot.send_chat_action(message.chat.id, "typing")
    try:
        answer = await _send_to_agent(transcript, message.from_user.id)
    except Exception as exc:
        logger.exception("Agent err: %s", exc)
        answer = "–û—à–∏–±–∫–∞ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞"

    await message.answer(answer)
