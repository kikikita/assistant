from typing import Any, Dict, List
import asyncio
import httpx
from aiogram import Bot, F, Router
from aiogram.enums import ParseMode
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message

from keyboards.inline import (
    consent_kb,
    resume_completed_kb,
    resume_reset_or_continue_kb,
)
from settings import settings
from utils.states import DialogSG

router = Router()

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Telegram limits & helpers ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

MAX_TG_MSG = 4096          # —Ñ–æ—Ä–º–∞–ª—å–Ω—ã–π –ø—Ä–µ–¥–µ–ª Telegram
SAFE_TG_MSG = 4000          # –æ—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–ø–∞—Å –¥–ª—è html-—Ç–µ–≥–æ–≤


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ PDF resume ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@router.message(F.document.mime_type == "application/pdf")
async def pdf_resume_cb(message: Message, bot: Bot, state: FSMContext) -> None:
    """
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç PDF-—Ñ–∞–π–ª, –æ—Ç–¥–∞—ë—Ç –µ–≥–æ —Å—Ç–∞—Ä–æ–π —Ä—É—á–∫–µ /dialog/pdf.
    –î–∞–ª–µ–µ:
      ‚Ä¢ –µ—Å–ª–∏ backend –≤–µ—Ä–Ω—É–ª –∏—Ç–æ–≥–æ–≤–æ–µ —Ä–µ–∑—é–º–µ ‚Äì –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ;
      ‚Ä¢ –∏–Ω–∞—á–µ (–Ω—É–∂–Ω–æ —É—Ç–æ—á–Ω–µ–Ω–∏–µ) ‚Äì –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º –æ–±—â–µ–Ω–∏–µ –Ω–∞ –∞–≥–µ–Ω—Ç–∞.
    """
    status_msg = await message.answer("‚è≥ –†–∞—Å–ø–æ–∑–Ω–∞—é —Ä–µ–∑—é–º–µ, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
    tg_id = str(message.from_user.id)

    # ‚Äî —Å–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª –∏–∑ Telegram ‚Äî
    doc = message.document
    file = await bot.get_file(doc.file_id)
    raw = await bot.download_file(file.file_path)
    files = {"file": ("resume.pdf", raw, "application/pdf")}

    async with httpx.AsyncClient(timeout=120.0) as cli:
        resp = await cli.post(
            f"{settings.bots.app_url}/api/v1/dialog/pdf",
            data={"tg_id": tg_id},
            files=files,
        )

    if resp.status_code != 200:
        await status_msg.edit_text(
            "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å PDF. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑."
        )
        return

    data = resp.json()

    # ‚Äî –≥–æ—Ç–æ–≤—ã–π CV –∏–∑ PDF ‚Äî
    if "cv_markdown" in data:
        await _send_long(
            message.chat.id,
            f"‚úÖ –Ø —Å–æ–±—Ä–∞–ª —Ä–µ–∑—é–º–µ!\n\n{data['cv_markdown']}",
            bot,
            reply_markup=resume_completed_kb(),
        )
        await state.clear()
        return

    # ‚Äî –Ω—É–∂–µ–Ω –¥–∏–∞–ª–æ–≥ —Å –∞–≥–µ–Ω—Ç–æ–º –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏–π ‚Äî
    await status_msg.edit_text(
        "‚úÖ –†–µ–∑—é–º–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ! –¢–µ–ø–µ—Ä—å –∑–∞–¥–∞–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —É—Ç–æ—á–Ω—è—é—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤."
    )
    await _start_agent_flow(
        message.chat.id,
        message.from_user.id,
        bot,
        state,
        initial_prompt="–ü—Ä–æ–¥–æ–ª–∂–∏–º: —É—Ç–æ—á–Ω–∏ –¥–µ—Ç–∞–ª–∏ —Ä–µ–∑—é–º–µ, –∫–æ—Ç–æ—Ä—ã–µ –µ—â—ë –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω—ã",
        message=message,
    )


def _split_long(text: str, limit: int = SAFE_TG_MSG) -> List[str]:
    """
    –î–µ–ª–∏—Ç –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç (–æ–±—ã—á–Ω—ã–π –∏–ª–∏ HTML/Markdown) –Ω–∞ —á–∞—Å—Ç–∏ ‚â§ limit.
    """
    if len(text) <= limit:
        return [text]

    parts: List[str] = []
    while len(text) > limit:
        cut = text.rfind("\n\n", 0, limit)
        if cut == -1:
            cut = text.rfind("\n", 0, limit)
        if cut == -1:
            cut = limit
        parts.append(text[:cut].rstrip())
        text = text[cut:].lstrip()
    if text:
        parts.append(text)
    return parts


async def _send_long(
    chat_id: int,
    text: str,
    bot: Bot,
    *,
    reply_markup=None,
) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç (–≤–æ–∑–º–æ–∂–Ω–æ –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–π) –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏.
    """
    chunks = _split_long(text)
    for i, chunk in enumerate(chunks):
        await bot.send_message(
            chat_id,
            chunk,
            parse_mode=ParseMode.HTML,
            reply_markup=reply_markup if i == len(chunks) - 1 else None,
        )


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ LLM-–∞–≥–µ–Ω—Ç ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

async def _ask_agent(tg_id: int, text: str, message: Message) -> str:
    """
    –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ–±–æ–ª–æ—á–∫–∞: —à–ª—ë–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É
    –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ –æ—Ç–≤–µ—Ç (—Å—Ç—Ä–æ–∫–∞).
    """
    stop_typing = asyncio.Event()
    asyncio.create_task(send_typing_periodically(message, stop_typing))
    async with httpx.AsyncClient(timeout=120.0) as cli:
        resp = await cli.post(
            f"{settings.bots.app_url}/api/v1/dialog/agent",
            json={"user_id": tg_id, "message": text},
        )
    if resp.status_code != 200:
        return (
            "‚ö†Ô∏è –ò–∑–≤–∏–Ω–∏—Ç–µ, —Å–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. "
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å —á—É—Ç—å –ø–æ–∑–∂–µ."
        )
    stop_typing.set()
    return resp.json().get("answer") or "‚Ä¶"


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ —Å–æ–≥–ª–∞—Å–∏—è ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

async def _check_consent(tg_id: int) -> bool:
    """True ‚á¢ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏–Ω—è–ª –æ–±–∞ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö —Å–æ–≥–ª–∞—Å–∏—è."""
    url = f"{settings.bots.app_url}/api/v1/auth/tg"
    async with httpx.AsyncClient(timeout=5.0) as cli:
        resp = await cli.post(url, json={"tg_id": tg_id})
    if resp.status_code != 200:
        return False
    user: Dict[str, Any] = resp.json()["user"]
    return bool(user.get("pdn_agreed") and user.get("offer_agreed"))


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –≤—Ö–æ–¥ –≤ –¥–∏–∞–ª–æ–≥ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

async def _start_agent_flow(
    chat_id: int,
    tg_id: int,
    bot: Bot,
    state: FSMContext,
    *,
    initial_prompt: str,
    message: Message,
) -> None:
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –¥–∏–∞–ª–æ–≥ —Å LLM-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º:
      ‚Ä¢ —à–ª—ë–º –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É ¬´initial_prompt¬ª,
      ‚Ä¢ –≤—ã–≤–æ–¥–∏–º –µ–≥–æ –æ—Ç–≤–µ—Ç,
      ‚Ä¢ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º FSM –≤ waiting_for_answer.
    """
    await bot.send_chat_action(chat_id, "typing")
    answer = await _ask_agent(tg_id, initial_prompt, message)
    await _send_long(chat_id, answer, bot)
    await state.set_state(DialogSG.waiting_for_answer)


async def _begin_dialog(
    chat_id: int,
    tg_id: int,
    bot: Bot,
    state: FSMContext,
    message: Message,
) -> None:
    """
    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏
    ¬´üìù –ó–∞–ø–æ–ª–Ω–∏—Ç—å —Ä–µ–∑—é–º–µ¬ª: –≥–æ—Ç–æ–≤–æ–µ, —á–∞—Å—Ç–∏—á–Ω–æ–µ –∏–ª–∏ –∑–∞–ø—É—Å–∫ –Ω–æ–≤–æ–≥–æ
    –¥–∏–∞–ª–æ–≥–∞ —Å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º.
    """
    async with httpx.AsyncClient() as client:
        resp = await client.post(
            f"{settings.bots.app_url}/api/v1/dialog/next",
            json={"user_id": tg_id},
            timeout=10.0,
        )
    if resp.status_code != 200:
        await bot.send_message(chat_id, "‚ö†Ô∏è –°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
        return

    data: Dict[str, Any] = resp.json()

    # ‚îÄ‚îÄ —É–∂–µ –≥–æ—Ç–æ–≤–æ–µ —Ä–µ–∑—é–º–µ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    if data.get("cv_markdown") and "resume_id" not in data:
        await _send_long(
            chat_id,
            f"‚úÖ –†–µ–∑—é–º–µ —É–∂–µ –≥–æ—Ç–æ–≤–æ:\n\n{data['cv_markdown']}",
            bot,
            reply_markup=resume_completed_kb(),
        )
        return

    # ‚îÄ‚îÄ –µ—Å—Ç—å —á–µ—Ä–Ω–æ–≤–∏–∫ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    if data.get("resume_id"):
        await _send_long(
            chat_id,
            f"üìù –í—ã –Ω–∞—á–∞–ª–∏, –Ω–æ –µ—â—ë –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–∏:\n\n{data['cv_markdown']}",
            bot,
            reply_markup=resume_reset_or_continue_kb(data["resume_id"]),
        )
        return

    # ‚îÄ‚îÄ –Ω–æ–≤–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞ –µ—â—ë –Ω–µ –Ω–∞—á–∏–Ω–∞–ª–∏ ‚Äì –∑–∞–ø—É—Å–∫–∞–µ–º –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ ‚îÄ‚îÄ‚îÄ‚îÄ
    await _start_agent_flow(
        chat_id,
        tg_id,
        bot,
        state,
        initial_prompt="–ù–∞—á–∞—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–µ–∑—é–º–µ",
        message=message,
    )


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ public handlers ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

@router.message(F.text == "üìù –ó–∞–ø–æ–ª–Ω–∏—Ç—å —Ä–µ–∑—é–º–µ")
async def start_dialog(message: Message, bot: Bot, state: FSMContext) -> None:
    await state.clear()
    consent_txt = (
        "–ö–∞–∫ —Ö–æ—Ä–æ—à–æ –≤–æ—Å–ø–∏—Ç–∞–Ω–Ω—ã–π —Ä–æ–±–æ—Ç, —è –¥–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∏—Ç—å –≤–∞—à–µ —Å–æ–≥–ª–∞—Å–∏–µ "
        "–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ —Å–æ–≥–ª–∞—Å–∏–µ —Å –æ—Ñ–µ—Ä—Ç–æ–π.\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –¥–æ–∫—É–º–µ–Ω—Ç–æ–º –ø–æ "
        '<a href="https://tomoru.team/useragreement">—Å—Å—ã–ª–∫–µ</a>\n\n'
        "–í—ã —Å–æ–≥–ª–∞—Å–Ω—ã —Å —ç—Ç–∏–º –¥–æ–∫—É–º–µ–Ω—Ç–æ–º?"
    )
    if not await _check_consent(message.from_user.id):
        await message.answer(
            consent_txt,
            parse_mode=ParseMode.HTML,
            reply_markup=consent_kb(),
        )
        return
    await _begin_dialog(message.chat.id, message.from_user.id, bot, state, message)


@router.callback_query(F.data.startswith("consent:"))
async def consent_cb(
    query: CallbackQuery,
    bot: Bot,
    state: FSMContext,
) -> None:
    await query.answer()
    if query.data.endswith(":no"):
        await query.message.answer(
            "üòî –ë–µ–∑ —Å–æ–≥–ª–∞—Å–∏—è –º—ã –Ω–µ —Å–º–æ–∂–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.\n"
            "–ü—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´üìù –ó–∞–ø–æ–ª–Ω–∏—Ç—å —Ä–µ–∑—é–º–µ¬ª –µ—â—ë —Ä–∞–∑.",
        )
        await query.message.delete_reply_markup()
        return

    url = f"{settings.bots.app_url}/api/v1/users/consent"
    async with httpx.AsyncClient(timeout=5.0) as cli:
        await cli.post(url, json={"tg_id": query.from_user.id, "agree": True})
    await query.message.delete_reply_markup()

    await _begin_dialog(query.message.chat.id, query.from_user.id, bot, state, query.message)


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ø–æ—Ç–æ–∫ –æ–±—â–µ–Ω–∏—è ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

async def send_typing_periodically(message: Message, stop_event: asyncio.Event):
    """Send typing indicator every 4 seconds until stop_event is set"""
    while not stop_event.is_set():
        try:
            await message.bot.send_chat_action(message.chat.id, "typing")
            await asyncio.wait_for(stop_event.wait(), timeout=4.0)
        except asyncio.TimeoutError:
            continue # Timeout is expected, continue sending typing

@router.message(DialogSG.waiting_for_answer)
async def relay_to_agent(message: Message, state: FSMContext) -> None:
    """
    –õ—é–±–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Üí –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É, –æ—Ç–≤–µ—Ç ‚Äì –æ–±—Ä–∞—Ç–Ω–æ.
    """
    answer = await _ask_agent(message.from_user.id, message.text or "", message)
    await _send_long(message.chat.id, answer, message.bot)


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ reset / continue —á–µ—Ä–Ω–æ–≤–∏–∫–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

@router.callback_query(F.data == "resume:reset")
async def reset_resume(
    query: CallbackQuery,
    state: FSMContext,
    bot: Bot,
) -> None:
    """–ê—Ä—Ö–∏–≤–∏—Ä—É–µ–º —á–µ—Ä–Ω–æ–≤–∏–∫, —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π –∏ —Å—Ä–∞–∑—É –∑–æ–≤—ë–º –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞."""
    await query.answer()
    await state.clear()

    async with httpx.AsyncClient() as client:
        resp = await client.post(
            f"{settings.bots.app_url}/api/v1/dialog/reset",
            json={"user_id": query.from_user.id},
            timeout=10.0,
        )
    if resp.status_code != 200:
        await query.message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")
        return

    await query.message.answer("üîÅ –ó–∞–ø–æ–ª–Ω—è–µ–º —Ä–µ–∑—é–º–µ –∑–∞–Ω–æ–≤–æ!")
    await _start_agent_flow(
        query.message.chat.id,
        query.from_user.id,
        bot,
        state,
        initial_prompt="–ù–∞—á–Ω—ë–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–µ–∑—é–º–µ –∑–∞–Ω–æ–≤–æ",
        message=query.message,
    )


@router.callback_query(F.data.startswith("resume:continue:"))
async def continue_resume(
    query: CallbackQuery,
    bot: Bot,
    state: FSMContext,
) -> None:
    """
    –í–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º —á–µ—Ä–Ω–æ–≤–∏–∫ –≤ –ë–î, –¥–∞–ª—å—à–µ —Å–Ω–æ–≤–∞ –ø–µ—Ä–µ–¥–∞—ë–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É.
    """
    await query.answer()
    resume_id = int(query.data.split(":")[-1])

    async with httpx.AsyncClient() as client:
        resp = await client.post(
            f"{settings.bots.app_url}/api/v1/dialog/resume-continue",
            json={"resume_id": resume_id, "user_id": query.from_user.id},
            timeout=10.0,
        )
    if resp.status_code != 200:
        await query.message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è.")
        return

    await query.message.answer("‚úçÔ∏è –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ!")
    await _start_agent_flow(
        query.message.chat.id,
        query.from_user.id,
        bot,
        state,
        initial_prompt="–ü—Ä–æ–¥–æ–ª–∂–∏–º –∑–∞–ø–æ–ª–Ω—è—Ç—å —Ä–µ–∑—é–º–µ",
        message=query.message,
    )
